esphome:
  name: volkszahler-lora-gateway
  friendly_name: Volksz√§hler LoRa Gateway
  includes:
    - lora_receiver.h
  libraries:
    - "SPI"
    - "jgromes/RadioLib@^6.3.0"

esp32:
  board: ttgo-lora32-v21  # Adjust based on your exact LilyGo model
  framework:
    type: arduino

# Enable logging
logger:
  level: DEBUG

# Enable Home Assistant API
api:

# OTA updates
ota:
  - platform: esphome

# WiFi Configuration
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  
  # Enable fallback hotspot in case wifi connection fails
  ap:
    ssid: "LoRa-Gateway-Fallback"
    password: !secret wifi_failover

captive_portal:

# Web server for debugging
web_server:
  port: 80

# Time synchronization for timestamps
time:
  - platform: homeassistant
    id: homeassistant_time

# I2C bus for display
i2c:
  sda: 21  # LilyGo LoRa32 V2.1 default
  scl: 22  # LilyGo LoRa32 V2.1 default
  frequency: 400kHz
  id: bus_a

# Fonts for display (using Google Fonts)
font:
  - file:
      type: gfonts
      family: Roboto Mono
      weight: 700
    id: font_large
    size: 20
  - file:
      type: gfonts
      family: Roboto Mono
      weight: 400
    id: font_medium
    size: 14
  - file:
      type: gfonts
      family: Roboto Mono
      weight: 400
    id: font_small
    size: 10

# OLED Display configuration
display:
  - platform: ssd1306_i2c
    model: "SSD1306 128x64"
    address: 0x3C
    rotation: 0
    id: oled_display
    pages:
      # Page 1: Current Power and Energy
      - id: page_power
        lambda: |-
          // Title
          it.print(64, 0, id(font_small), TextAlign::TOP_CENTER, "SMART METER");
          it.line(0, 10, 127, 10);
          
          // Current Power (large, centered)
          char power_str[20];
          float power = id(meter_power).state;
          if (isnan(power)) {
            it.print(64, 25, id(font_medium), TextAlign::CENTER, "No Data");
          } else {
            if (power < 0) {
              snprintf(power_str, sizeof(power_str), "<%.0fW", -power);
              it.print(64, 25, id(font_large), TextAlign::CENTER, power_str);
              it.print(64, 12, id(font_small), TextAlign::CENTER, "GENERATING");
            } else {
              snprintf(power_str, sizeof(power_str), "%.0fW", power);
              it.print(64, 25, id(font_large), TextAlign::CENTER, power_str);
              it.print(64, 12, id(font_small), TextAlign::CENTER, "CONSUMING");
            }
          }
          
          // Bottom stats
          it.line(0, 46, 127, 46);
          
          // Consumption
          char cons_str[20];
          float cons = id(meter_consumption).state;
          if (!isnan(cons)) {
            snprintf(cons_str, sizeof(cons_str), "In:%.1fkWh", cons);
            it.print(2, 48, id(font_small), TextAlign::TOP_LEFT, cons_str);
          }
          
          // Generation
          char gen_str[20];
          float gen = id(meter_generation).state;
          if (!isnan(gen)) {
            snprintf(gen_str, sizeof(gen_str), "Out:%.1fkWh", gen);
            it.print(126, 48, id(font_small), TextAlign::TOP_RIGHT, gen_str);
          }
          
          // Last update time
          if (id(lora_rx).seconds_since_last_packet() < 999) {
            char time_str[20];
            snprintf(time_str, sizeof(time_str), "%ds ago", 
                     (int)id(lora_rx).seconds_since_last_packet());
            it.print(64, 56, id(font_small), TextAlign::TOP_CENTER, time_str);
          }
          
      # Page 2: Link Quality and Battery
      - id: page_link
        lambda: |-
          // Title
          it.print(64, 0, id(font_small), TextAlign::TOP_CENTER, "LINK STATUS");
          it.line(0, 10, 127, 10);
          
          // RSSI
          it.print(2, 14, id(font_small), TextAlign::TOP_LEFT, "RSSI:");
          if (!isnan(id(lora_rssi).state)) {
            char rssi_str[20];
            int rssi = (int)id(lora_rssi).state;
            snprintf(rssi_str, sizeof(rssi_str), "%d dBm", rssi);
            it.print(40, 14, id(font_medium), TextAlign::TOP_LEFT, rssi_str);
            
            // Signal bars
            int bars = 0;
            if (rssi > -60) bars = 4;
            else if (rssi > -70) bars = 3;
            else if (rssi > -80) bars = 2;
            else if (rssi > -90) bars = 1;
            
            for(int i = 0; i < 4; i++) {
              int h = 3 + i * 2;
              int y = 22 - h;
              if (i < bars) {
                it.filled_rectangle(110 + i * 4, y, 3, h);
              } else {
                it.rectangle(110 + i * 4, y, 3, h);
              }
            }
          }
          
          // SNR
          it.print(2, 26, id(font_small), TextAlign::TOP_LEFT, "SNR:");
          if (!isnan(id(lora_snr).state)) {
            char snr_str[20];
            snprintf(snr_str, sizeof(snr_str), "%.1f dB", id(lora_snr).state);
            it.print(40, 26, id(font_medium), TextAlign::TOP_LEFT, snr_str);
          }
          
          // Battery
          it.print(2, 38, id(font_small), TextAlign::TOP_LEFT, "Battery:");
          if (!isnan(id(meter_battery).state)) {
            char bat_str[20];
            float voltage = id(meter_battery).state;
            int percent = (int)((voltage - 3.0) / 1.2 * 100);
            if (percent > 100) percent = 100;
            if (percent < 0) percent = 0;
            
            snprintf(bat_str, sizeof(bat_str), "%.2fV (%d%%)", voltage, percent);
            it.print(50, 38, id(font_small), TextAlign::TOP_LEFT, bat_str);
            
            // Battery icon
            it.rectangle(100, 38, 25, 10);
            it.rectangle(125, 40, 2, 6);
            int fill = (23 * percent) / 100;
            if (fill > 0) {
              it.filled_rectangle(101, 39, fill, 8);
            }
          }
          
          // Packet stats
          it.print(2, 50, id(font_small), TextAlign::TOP_LEFT, "Packets:");
          char pkt_str[30];
          snprintf(pkt_str, sizeof(pkt_str), "%d (%d missed)", 
                   (int)id(packet_counter).state, 
                   (int)id(missed_packets).state);
          it.print(50, 50, id(font_small), TextAlign::TOP_LEFT, pkt_str);
          
      # Page 3: Daily Statistics
      - id: page_daily
        lambda: |-
          // Title with date
          auto time = id(homeassistant_time).now();
          if (time.is_valid()) {
            char date_str[20];
            strftime(date_str, sizeof(date_str), "%d.%m.%Y", time.as_local());
            it.print(64, 0, id(font_small), TextAlign::TOP_CENTER, date_str);
          } else {
            it.print(64, 0, id(font_small), TextAlign::TOP_CENTER, "DAILY STATS");
          }
          it.line(0, 10, 127, 10);
          
          // Calculate daily values (would need additional sensors for this)
          // For now, show current totals
          it.print(64, 14, id(font_small), TextAlign::TOP_CENTER, "TOTALS");
          
          // Total consumption
          char cons_str[30];
          float cons = id(meter_consumption).state;
          if (!isnan(cons)) {
            snprintf(cons_str, sizeof(cons_str), "Used: %.2f kWh", cons);
            it.print(2, 26, id(font_medium), TextAlign::TOP_LEFT, cons_str);
          }
          
          // Total generation
          char gen_str[30];
          float gen = id(meter_generation).state;
          if (!isnan(gen)) {
            snprintf(gen_str, sizeof(gen_str), "Solar: %.2f kWh", gen);
            it.print(2, 38, id(font_medium), TextAlign::TOP_LEFT, gen_str);
          }
          
          // Net energy
          if (!isnan(cons) && !isnan(gen)) {
            float net = cons - gen;
            char net_str[30];
            if (net > 0) {
              snprintf(net_str, sizeof(net_str), "Net: +%.2f kWh", net);
            } else {
              snprintf(net_str, sizeof(net_str), "Net: %.2f kWh", net);
            }
            it.print(2, 50, id(font_medium), TextAlign::TOP_LEFT, net_str);
          }
          
    update_interval: 5s  # Update display every 5 seconds


# Custom LoRa receiver component
custom_component:
  - lambda: |-
      auto lora_receiver = new LoRaReceiver();
      return {lora_receiver};
    components:
      - id: lora_rx

# Sensors for meter data
sensor:
  # Current Power
  - platform: template
    name: "Smart Meter Power"
    id: meter_power
    unit_of_measurement: "W"
    device_class: power
    state_class: measurement
    accuracy_decimals: 1
    icon: "mdi:flash"
    
  # Total Consumption
  - platform: template
    name: "Smart Meter Total Consumption"
    id: meter_consumption
    unit_of_measurement: "kWh"
    device_class: energy
    state_class: total_increasing
    accuracy_decimals: 3
    icon: "mdi:counter"
    
  # Total Generation
  - platform: template
    name: "Smart Meter Total Generation"
    id: meter_generation
    unit_of_measurement: "kWh"
    device_class: energy
    state_class: total_increasing
    accuracy_decimals: 3
    icon: "mdi:solar-power"
    
  # Battery Voltage
  - platform: template
    name: "Smart Meter Battery Voltage"
    id: meter_battery
    unit_of_measurement: "V"
    device_class: voltage
    state_class: measurement
    accuracy_decimals: 2
    icon: "mdi:battery"
    filters:
      - sliding_window_moving_average:
          window_size: 3
          send_every: 1
    
  # Link Quality - RSSI
  - platform: template
    name: "LoRa Link RSSI"
    id: lora_rssi
    unit_of_measurement: "dBm"
    device_class: signal_strength
    state_class: measurement
    accuracy_decimals: 0
    icon: "mdi:signal"
    entity_category: diagnostic
    
  # Link Quality - SNR
  - platform: template
    name: "LoRa Link SNR"
    id: lora_snr
    unit_of_measurement: "dB"
    state_class: measurement
    accuracy_decimals: 1
    icon: "mdi:signal-cellular-3"
    entity_category: diagnostic
    
  # Packet Counter
  - platform: template
    name: "LoRa Packet Counter"
    id: packet_counter
    accuracy_decimals: 0
    icon: "mdi:counter"
    entity_category: diagnostic
    
  # Missed Packets
  - platform: template
    name: "LoRa Missed Packets"
    id: missed_packets
    accuracy_decimals: 0
    icon: "mdi:alert-circle"
    entity_category: diagnostic

# Text sensors for status
text_sensor:
  - platform: template
    name: "LoRa Status"
    id: lora_status
    icon: "mdi:information"
    entity_category: diagnostic
    
  - platform: template
    name: "Last Packet Time"
    id: last_packet_time
    icon: "mdi:clock"
    entity_category: diagnostic

# Binary sensor for connection status
binary_sensor:
  - platform: template
    name: "LoRa Connected"
    id: lora_connected
    device_class: connectivity
    entity_category: diagnostic
    lambda: |-
      return id(lora_rx).seconds_since_last_packet() < 180;

# Combined intervals
interval:
  # Status check
  - interval: 10s
    then:
      - lambda: |-
          // Update connection status
          id(lora_connected).publish_state(id(lora_rx).seconds_since_last_packet() < 180);
          
          // Update status text
          if (id(lora_rx).seconds_since_last_packet() < 180) {
            id(lora_status).publish_state("Connected");
          } else if (id(lora_rx).seconds_since_last_packet() < 600) {
            id(lora_status).publish_state("Warning: No data for " + 
              to_string(id(lora_rx).seconds_since_last_packet()) + " seconds");
          } else {
            id(lora_status).publish_state("Disconnected");
          }
  
  # Display page rotation
  - interval: 10s
    then:
      - display.page.show_next: oled_display
      - component.update: oled_display

# Button to reset missed packet counter
button:
  - platform: template
    name: "Reset Missed Packet Counter"
    icon: "mdi:restart"
    entity_category: config
    on_press:
      - lambda: |-
          id(lora_rx).reset_missed_packets();
          id(missed_packets).publish_state(0);
          
  # Button to force display refresh
  - platform: template
    name: "Refresh Display"
    icon: "mdi:refresh"
    entity_category: config
    on_press:
      - component.update: oled_display