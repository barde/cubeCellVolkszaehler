esphome:
  name: volkszahler-lora-gateway
  friendly_name: Volksz√§hler LoRa Gateway

esp32:
  board: ttgo-lora32-v21
  framework:
    type: arduino

# Enable logging
logger:
  level: DEBUG

# Enable Home Assistant API
api:

# OTA updates
ota:
  - platform: esphome

# WiFi Configuration
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  
  # Enable fallback hotspot
  ap:
    ssid: "LoRa-Gateway-Fallback"
    password: !secret wifi_failover

captive_portal:

# Web server for debugging
web_server:
  port: 80

# Time synchronization
time:
  - platform: homeassistant
    id: homeassistant_time

# I2C bus for display
i2c:
  sda: 21
  scl: 22
  frequency: 400kHz
  id: bus_a

# Fonts for display (using Google Fonts)
font:
  - file:
      type: gfonts
      family: Roboto Mono
      weight: 700
    id: font_large
    size: 20
  - file:
      type: gfonts
      family: Roboto Mono
      weight: 400
    id: font_medium
    size: 14
  - file:
      type: gfonts
      family: Roboto Mono
      weight: 400
    id: font_small
    size: 10

# OLED Display configuration
display:
  - platform: ssd1306_i2c
    model: "SSD1306 128x64"
    address: 0x3C
    rotation: 0
    id: oled_display
    pages:
      # Simple status page for testing
      - id: page_status
        lambda: |-
          // Title
          it.print(64, 0, id(font_small), TextAlign::TOP_CENTER, "LORA GATEWAY");
          it.line(0, 10, 127, 10);
          
          // Status
          it.print(64, 25, id(font_medium), TextAlign::CENTER, "Waiting for");
          it.print(64, 40, id(font_medium), TextAlign::CENTER, "LoRa data...");
          
          // WiFi status
          if (WiFi.isConnected()) {
            char wifi_str[30];
            snprintf(wifi_str, sizeof(wifi_str), "WiFi: %.0f dBm", id(wifi_signal_sensor).state);
            it.print(2, 54, id(font_small), TextAlign::TOP_LEFT, wifi_str);
          } else {
            it.print(2, 54, id(font_small), TextAlign::TOP_LEFT, "WiFi: Disconnected");
          }
          
          // Uptime
          char uptime_str[30];
          snprintf(uptime_str, sizeof(uptime_str), "Up: %.0fs", id(uptime_sensor).state);
          it.print(126, 54, id(font_small), TextAlign::TOP_RIGHT, uptime_str);
          
    update_interval: 5s

# Basic sensors for testing
sensor:
  # WiFi Signal
  - platform: wifi_signal
    name: "WiFi Signal"
    id: wifi_signal_sensor
    update_interval: 60s
    
  # Uptime
  - platform: uptime
    name: "Uptime"
    id: uptime_sensor
    update_interval: 10s
    
  # Template sensors for meter data (will be updated later)
  - platform: template
    name: "Smart Meter Power"
    id: meter_power
    unit_of_measurement: "W"
    device_class: power
    state_class: measurement
    accuracy_decimals: 1
    icon: "mdi:flash"
    lambda: |-
      return 0;  // Placeholder
    
  - platform: template
    name: "Smart Meter Total Consumption"
    id: meter_consumption
    unit_of_measurement: "kWh"
    device_class: energy
    state_class: total_increasing
    accuracy_decimals: 3
    icon: "mdi:counter"
    lambda: |-
      return 0;  // Placeholder
    
  - platform: template
    name: "Smart Meter Total Generation"
    id: meter_generation
    unit_of_measurement: "kWh"
    device_class: energy
    state_class: total_increasing
    accuracy_decimals: 3
    icon: "mdi:solar-power"
    lambda: |-
      return 0;  // Placeholder
    
  - platform: template
    name: "Smart Meter Battery Voltage"
    id: meter_battery
    unit_of_measurement: "V"
    device_class: voltage
    state_class: measurement
    accuracy_decimals: 2
    icon: "mdi:battery"
    lambda: |-
      return 3.7;  // Placeholder